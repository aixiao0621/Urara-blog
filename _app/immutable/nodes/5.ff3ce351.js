import{S as ys,i as fs,s as vs,U as Ll,y as _s,z as ms,A as Ds,V as hs,W as ns,g as us,d as Ps,B as Hs,X as ps,k as t,q as o,a as d,Y as rs,e as cs,l as n,m as p,r as a,h as s,c as y,Z as Fs,n as u,b as i,D as e,E as Ss}from"../chunks/index.c6996e9d.js";import{P as Cs}from"../chunks/post_layout.6e0aecfd.js";function Is(N){let c,P,H,m,F,D,x,_,T,Ie,L,Ae,Le,Oe,g,be,we,j,xe,Te,v,We,z,ke,$e,B,Ne,Ue,X,Ve,Ze,Y,qe,Ge,ve,W,U,Ke,_e,S,E,Me,J,Re,ge,Q,je,ze,ee,Be,Xe,le,Ye,Je,se,Qe,el,oe,ll,sl,ol,h,al,ae,tl,nl,te,pl,rl,ne,cl,Fl,il,I,El,pe,dl,yl,re,fl,vl,me,ce,Es=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'><span style="color: #F07178">web_server</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">80</span></div><div class='line'></div><div class='line'><span style="color: #F07178">switch</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">platform</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">gpio</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">pin</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">GPIO0</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">书房灯</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">relay2</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">inverted</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #FF9CAC">True</span></div><div class='line'><span style="color: #EEFFFF">    </span></div><div class='line'><span style="color: #F07178">binary_sensor</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">platform</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">gpio</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">pin</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">GPIO2</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">press_switch_lib1</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">device_class</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">opening</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">filters</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">delayed_on_off</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">100ms</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#消抖</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">on_state</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF">  </span><span style="color: #546E7A">#当这个二进制传感器状态改变的时候，触发 gpio0</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #F07178">then</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">switch.toggle</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">relay2</span></div></code></div></pre>`,Fe,O,_l,ie,ml,Dl,De,k,V,hl,he,Z,A,ul,Ee,Pl,Hl,de,Sl,Cl,ue,$,q,Il,Pe,G,Al,He,ye,ds=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'><span style="color: #F07178">wifi</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #89DDFF">  </span><span style="color: #546E7A"># ...</span></div><div class='line'><span style="color: #F07178">power_save_mode</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">light</span></div></code></div></pre>`,fe;return{c(){c=t("p"),P=o("Welcome to Urara!"),H=d(),m=t("h2"),F=t("a"),D=o("环境安装"),x=d(),_=t("ol"),T=t("li"),Ie=o("使用"),L=t("a"),Ae=o("HassWP"),Le=o("作为 homeassistant 客户端。"),Oe=d(),g=t("li"),be=o("使用 ESPHome 作为连接 ESP8266 与 HA 的平台，由于 HassWP 并不是 HA 的完全体，所以这里需要安装完整的 ESPHome，这里选择将其部署在 Liunx 虚拟机上。"),we=d(),j=t("li"),xe=o("在安装 ESPHome 前请确保 Liunx 的 python 处于较高版本，这里使用了 3.11.1 版本。"),Te=d(),v=t("li"),We=o("使用 "),z=t("code"),ke=o("pip3 install esphome"),$e=o(` 命令安装 ESPHome;
使用 `),B=t("code"),Ne=o("ln -s /home/coolcall/.local/bin/esphome /usr/local/bin/esphome"),Ue=o(" 创建"),X=t("del"),Ve=o("软连接"),Ze=o(` ；
使用 `),Y=t("code"),qe=o("sudo esphome dashboard config/"),Ge=o(" 运行。"),ve=d(),W=t("h2"),U=t("a"),Ke=o("ESP8266 的接入 ESPHome"),_e=d(),S=t("ol"),E=t("li"),Me=o("在 ESPHome 的管理页面中（建议在 windows 系统下使用 Liunx IP 地址的 6052 端口号访问，虚拟机使用桥接模式），点击"),J=t("code"),Re=o("NEW DEVICE"),ge=o(" 添加新设备，输入"),Q=t("code"),je=o("name"),ze=o(" ，在选择"),ee=t("code"),Be=o("ESP8266"),Xe=o(" 并出现"),le=t("code"),Ye=o("Configuration created!"),Je=o("后，先选择"),se=t("code"),Qe=o("SKIP"),el=o("，然后在页面右上角的"),oe=t("code"),ll=o("SECRETS"),sl=o("处配置网络并保存。"),ol=d(),h=t("li"),al=o("完成后打开"),ae=t("code"),tl=o("EDIT"),nl=o("并进行"),te=t("code"),pl=o("INSTALL"),rl=o("，选择第四个，这里我选择使用 ESP8266Flasher 刷写下载的"),ne=t("code"),cl=o(".bin"),Fl=o("（需要安装 CH341 驱动），当然你也可以选择使用 ESPHome 提供的 web 页面进行刷写。这里需要下载编译链，请保持良好的网络环境并等待一段时间。"),il=d(),I=t("li"),El=o("刷写成功后，ESP8266 就可以连接到 ESPHome 了，页面将会显示固件上线，再次点击"),pe=t("code"),dl=o("EDIT"),yl=o("，在"),re=t("code"),fl=o("captive_portal:"),vl=o("后添加以下代码："),me=d(),ce=new rs(!1),Fe=d(),O=t("p"),_l=o("再次"),ie=t("code"),ml=o("INSTALL"),Dl=o("时即可选择第一个选项刷写。"),De=d(),k=t("h2"),V=t("a"),hl=o("在 HA 中添加固件"),he=d(),Z=t("ol"),A=t("li"),ul=o("在 HA 的配置面板中选择设备与服务，在添加集成中搜索 ESPHome，主机地址需要填写上文中的"),Ee=t("code"),Pl=o("NAME"),Hl=o("，在输入 key 后即可添加成功。（key 可以在刷写的"),de=t("code"),Sl=o(".yaml"),Cl=o("文件中找到）"),ue=d(),$=t("h2"),q=t("a"),Il=o("其他"),Pe=d(),G=t("p"),Al=o("WIFI 省电模式："),He=d(),ye=new rs(!1),fe=cs(),this.h()},l(l){c=n(l,"P",{});var r=p(c);P=a(r,"Welcome to Urara!"),r.forEach(s),H=y(l),m=n(l,"H2",{id:!0});var Ol=p(m);F=n(Ol,"A",{href:!0});var bl=p(F);D=a(bl,"环境安装"),bl.forEach(s),Ol.forEach(s),x=y(l),_=n(l,"OL",{});var b=p(_);T=n(b,"LI",{});var Se=p(T);Ie=a(Se,"使用"),L=n(Se,"A",{href:!0,rel:!0,target:!0});var wl=p(L);Ae=a(wl,"HassWP"),wl.forEach(s),Le=a(Se,"作为 homeassistant 客户端。"),Se.forEach(s),Oe=y(b),g=n(b,"LI",{});var xl=p(g);be=a(xl,"使用 ESPHome 作为连接 ESP8266 与 HA 的平台，由于 HassWP 并不是 HA 的完全体，所以这里需要安装完整的 ESPHome，这里选择将其部署在 Liunx 虚拟机上。"),xl.forEach(s),we=y(b),j=n(b,"LI",{});var Tl=p(j);xe=a(Tl,"在安装 ESPHome 前请确保 Liunx 的 python 处于较高版本，这里使用了 3.11.1 版本。"),Tl.forEach(s),Te=y(b),v=n(b,"LI",{});var C=p(v);We=a(C,"使用 "),z=n(C,"CODE",{});var Wl=p(z);ke=a(Wl,"pip3 install esphome"),Wl.forEach(s),$e=a(C,` 命令安装 ESPHome;
使用 `),B=n(C,"CODE",{});var kl=p(B);Ne=a(kl,"ln -s /home/coolcall/.local/bin/esphome /usr/local/bin/esphome"),kl.forEach(s),Ue=a(C," 创建"),X=n(C,"DEL",{});var $l=p(X);Ve=a($l,"软连接"),$l.forEach(s),Ze=a(C,` ；
使用 `),Y=n(C,"CODE",{});var Nl=p(Y);qe=a(Nl,"sudo esphome dashboard config/"),Nl.forEach(s),Ge=a(C," 运行。"),C.forEach(s),b.forEach(s),ve=y(l),W=n(l,"H2",{id:!0});var Ul=p(W);U=n(Ul,"A",{href:!0});var Vl=p(U);Ke=a(Vl,"ESP8266 的接入 ESPHome"),Vl.forEach(s),Ul.forEach(s),_e=y(l),S=n(l,"OL",{});var K=p(S);E=n(K,"LI",{});var f=p(E);Me=a(f,"在 ESPHome 的管理页面中（建议在 windows 系统下使用 Liunx IP 地址的 6052 端口号访问，虚拟机使用桥接模式），点击"),J=n(f,"CODE",{});var Zl=p(J);Re=a(Zl,"NEW DEVICE"),Zl.forEach(s),ge=a(f," 添加新设备，输入"),Q=n(f,"CODE",{});var ql=p(Q);je=a(ql,"name"),ql.forEach(s),ze=a(f," ，在选择"),ee=n(f,"CODE",{});var Gl=p(ee);Be=a(Gl,"ESP8266"),Gl.forEach(s),Xe=a(f," 并出现"),le=n(f,"CODE",{});var Kl=p(le);Ye=a(Kl,"Configuration created!"),Kl.forEach(s),Je=a(f,"后，先选择"),se=n(f,"CODE",{});var Ml=p(se);Qe=a(Ml,"SKIP"),Ml.forEach(s),el=a(f,"，然后在页面右上角的"),oe=n(f,"CODE",{});var Rl=p(oe);ll=a(Rl,"SECRETS"),Rl.forEach(s),sl=a(f,"处配置网络并保存。"),f.forEach(s),ol=y(K),h=n(K,"LI",{});var w=p(h);al=a(w,"完成后打开"),ae=n(w,"CODE",{});var gl=p(ae);tl=a(gl,"EDIT"),gl.forEach(s),nl=a(w,"并进行"),te=n(w,"CODE",{});var jl=p(te);pl=a(jl,"INSTALL"),jl.forEach(s),rl=a(w,"，选择第四个，这里我选择使用 ESP8266Flasher 刷写下载的"),ne=n(w,"CODE",{});var zl=p(ne);cl=a(zl,".bin"),zl.forEach(s),Fl=a(w,"（需要安装 CH341 驱动），当然你也可以选择使用 ESPHome 提供的 web 页面进行刷写。这里需要下载编译链，请保持良好的网络环境并等待一段时间。"),w.forEach(s),il=y(K),I=n(K,"LI",{});var M=p(I);El=a(M,"刷写成功后，ESP8266 就可以连接到 ESPHome 了，页面将会显示固件上线，再次点击"),pe=n(M,"CODE",{});var Bl=p(pe);dl=a(Bl,"EDIT"),Bl.forEach(s),yl=a(M,"，在"),re=n(M,"CODE",{});var Xl=p(re);fl=a(Xl,"captive_portal:"),Xl.forEach(s),vl=a(M,"后添加以下代码："),M.forEach(s),K.forEach(s),me=y(l),ce=Fs(l,!1),Fe=y(l),O=n(l,"P",{});var Ce=p(O);_l=a(Ce,"再次"),ie=n(Ce,"CODE",{});var Yl=p(ie);ml=a(Yl,"INSTALL"),Yl.forEach(s),Dl=a(Ce,"时即可选择第一个选项刷写。"),Ce.forEach(s),De=y(l),k=n(l,"H2",{id:!0});var Jl=p(k);V=n(Jl,"A",{href:!0});var Ql=p(V);hl=a(Ql,"在 HA 中添加固件"),Ql.forEach(s),Jl.forEach(s),he=y(l),Z=n(l,"OL",{});var es=p(Z);A=n(es,"LI",{});var R=p(A);ul=a(R,"在 HA 的配置面板中选择设备与服务，在添加集成中搜索 ESPHome，主机地址需要填写上文中的"),Ee=n(R,"CODE",{});var ls=p(Ee);Pl=a(ls,"NAME"),ls.forEach(s),Hl=a(R,"，在输入 key 后即可添加成功。（key 可以在刷写的"),de=n(R,"CODE",{});var ss=p(de);Sl=a(ss,".yaml"),ss.forEach(s),Cl=a(R,"文件中找到）"),R.forEach(s),es.forEach(s),ue=y(l),$=n(l,"H2",{id:!0});var os=p($);q=n(os,"A",{href:!0});var as=p(q);Il=a(as,"其他"),as.forEach(s),os.forEach(s),Pe=y(l),G=n(l,"P",{});var ts=p(G);Al=a(ts,"WIFI 省电模式："),ts.forEach(s),He=y(l),ye=Fs(l,!1),fe=cs(),this.h()},h(){u(F,"href","#环境安装"),u(m,"id","环境安装"),u(L,"href","https://github.com/AlexxIT/HassWP"),u(L,"rel","nofollow noopener noreferrer external"),u(L,"target","_blank"),u(U,"href","#esp8266-的接入-esphome"),u(W,"id","esp8266-的接入-esphome"),ce.a=Fe,u(V,"href","#在-ha-中添加固件"),u(k,"id","在-ha-中添加固件"),u(q,"href","#其他"),u($,"id","其他"),ye.a=fe},m(l,r){i(l,c,r),e(c,P),i(l,H,r),i(l,m,r),e(m,F),e(F,D),i(l,x,r),i(l,_,r),e(_,T),e(T,Ie),e(T,L),e(L,Ae),e(T,Le),e(_,Oe),e(_,g),e(g,be),e(_,we),e(_,j),e(j,xe),e(_,Te),e(_,v),e(v,We),e(v,z),e(z,ke),e(v,$e),e(v,B),e(B,Ne),e(v,Ue),e(v,X),e(X,Ve),e(v,Ze),e(v,Y),e(Y,qe),e(v,Ge),i(l,ve,r),i(l,W,r),e(W,U),e(U,Ke),i(l,_e,r),i(l,S,r),e(S,E),e(E,Me),e(E,J),e(J,Re),e(E,ge),e(E,Q),e(Q,je),e(E,ze),e(E,ee),e(ee,Be),e(E,Xe),e(E,le),e(le,Ye),e(E,Je),e(E,se),e(se,Qe),e(E,el),e(E,oe),e(oe,ll),e(E,sl),e(S,ol),e(S,h),e(h,al),e(h,ae),e(ae,tl),e(h,nl),e(h,te),e(te,pl),e(h,rl),e(h,ne),e(ne,cl),e(h,Fl),e(S,il),e(S,I),e(I,El),e(I,pe),e(pe,dl),e(I,yl),e(I,re),e(re,fl),e(I,vl),i(l,me,r),ce.m(Es,l,r),i(l,Fe,r),i(l,O,r),e(O,_l),e(O,ie),e(ie,ml),e(O,Dl),i(l,De,r),i(l,k,r),e(k,V),e(V,hl),i(l,he,r),i(l,Z,r),e(Z,A),e(A,ul),e(A,Ee),e(Ee,Pl),e(A,Hl),e(A,de),e(de,Sl),e(A,Cl),i(l,ue,r),i(l,$,r),e($,q),e(q,Il),i(l,Pe,r),i(l,G,r),e(G,Al),i(l,He,r),ye.m(ds,l,r),i(l,fe,r)},p:Ss,d(l){l&&s(c),l&&s(H),l&&s(m),l&&s(x),l&&s(_),l&&s(ve),l&&s(W),l&&s(_e),l&&s(S),l&&s(me),l&&ce.d(),l&&s(Fe),l&&s(O),l&&s(De),l&&s(k),l&&s(he),l&&s(Z),l&&s(ue),l&&s($),l&&s(Pe),l&&s(G),l&&s(He),l&&s(fe),l&&ye.d()}}}function As(N){let c,P;const H=[N[0],is];let m={$$slots:{default:[Is]},$$scope:{ctx:N}};for(let F=0;F<H.length;F+=1)m=Ll(m,H[F]);return c=new Cs({props:m}),{c(){_s(c.$$.fragment)},l(F){ms(c.$$.fragment,F)},m(F,D){Ds(c,F,D),P=!0},p(F,[D]){const x=D&1?hs(H,[D&1&&ns(F[0]),D&0&&ns(is)]):{};D&2&&(x.$$scope={dirty:D,ctx:F}),c.$set(x)},i(F){P||(us(c.$$.fragment,F),P=!0)},o(F){Ps(c.$$.fragment,F),P=!1},d(F){Hs(c,F)}}}const is={title:"通过 Homeassistant 控制继电器",image:"/about/urara.webp",alt:"Urara",created:"2022-11-01T00:00:00.000Z",updated:"2023-12-12T00:00:00.000Z",tags:["Urara123"],images:[],slug:"/page1/+page.svelte.md",path:"/page1",toc:[{depth:2,title:"环境安装",slug:"环境安装"},{depth:2,title:"ESP8266 的接入 ESPHome",slug:"esp8266-的接入-esphome"},{depth:2,title:"在 HA 中添加固件",slug:"在-ha-中添加固件"},{depth:2,title:"其他",slug:"其他"}]};function Ls(N,c,P){return N.$$set=H=>{P(0,c=Ll(Ll({},c),ps(H)))},c=ps(c),[c]}class ws extends ys{constructor(c){super(),fs(this,c,Ls,As,vs,{})}}export{ws as component};
