import{S as Fl,i as il,s as El,U as Ce,y as dl,z as yl,A as fl,V as vl,W as ll,g as _l,d as Dl,B as ml,X as ol,k as t,q as o,a as y,Y as al,e as tl,l as n,m as p,r as a,h as l,c as f,Z as nl,n as h,b as i,D as s,E as hl}from"../chunks/index.cb04554d.js";import{P as ul}from"../chunks/post_layout.b4692dd9.js";function Pl(k){let F,_,H,I,r,d,W,A,Ss,Cs,Is,K,As,Ls,M,Os,bs,D,ws,R,xs,Ts,j,ks,Ws,B,$s,Ns,U,Vs,Zs,ys,w,$,gs,fs,u,E,qs,X,zs,Gs,Y,Ks,Ms,J,Rs,js,Q,Bs,Us,ss,Xs,Ys,es,Js,Qs,se,m,ee,ls,le,oe,os,ae,te,as,ne,pe,re,S,ce,ts,Fe,ie,ns,Ee,de,vs,ps,rl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'><span style="color: #F07178">web_server</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">80</span></div><div class='line'></div><div class='line'><span style="color: #F07178">switch</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">platform</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">gpio</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">pin</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">GPIO0</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">书房灯</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">relay2</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">inverted</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #FF9CAC">True</span></div><div class='line'><span style="color: #EEFFFF">    </span></div><div class='line'><span style="color: #F07178">binary_sensor</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">platform</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">gpio</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">pin</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">GPIO2</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">press_switch_lib1</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">device_class</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">opening</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">filters</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">delayed_on_off</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">100ms</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#消抖</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #F07178">on_state</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF">  </span><span style="color: #546E7A">#当这个二进制传感器状态改变的时候，触发 gpio0</span></div><div class='line'><span style="color: #EEFFFF">      </span><span style="color: #F07178">then</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> </span><span style="color: #F07178">switch.toggle</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">relay2</span></div></code></div></pre>`,rs,L,ye,cs,fe,ve,_s,x,N,_e,Ds,V,C,De,Fs,me,he,is,ue,Pe,ms,T,Z,He,hs,g,Se,us,Es,cl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'><span style="color: #F07178">wifi</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #89DDFF">  </span><span style="color: #546E7A"># ...</span></div><div class='line'><span style="color: #F07178">power_save_mode</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #C3E88D">light</span></div></code></div></pre>`,ds;return{c(){F=t("h2"),_=t("a"),H=o("环境安装"),I=y(),r=t("ol"),d=t("li"),W=o("使用"),A=t("a"),Ss=o("HassWP"),Cs=o("作为 homeassistant 客户端。"),Is=y(),K=t("li"),As=o("使用 ESPHome 作为连接 ESP8266 与 HA 的平台，由于 HassWP 并不是 HA 的完全体，所以这里需要安装完整的 ESPHome，这里选择将其部署在 Liunx 虚拟机上。"),Ls=y(),M=t("li"),Os=o("在安装 ESPHome 前请确保 Liunx 的 python 处于较高版本，这里使用了 3.11.1 版本。"),bs=y(),D=t("li"),ws=o("使用 "),R=t("code"),xs=o("pip3 install esphome"),Ts=o(` 命令安装 ESPHome;
使用 `),j=t("code"),ks=o("ln -s /home/coolcall/.local/bin/esphome /usr/local/bin/esphome"),Ws=o(" 创建"),B=t("del"),$s=o("软连接"),Ns=o(` ；
使用 `),U=t("code"),Vs=o("sudo esphome dashboard config/"),Zs=o(" 运行。"),ys=y(),w=t("h2"),$=t("a"),gs=o("ESP8266 接入 ESPHome"),fs=y(),u=t("ol"),E=t("li"),qs=o("在 ESPHome 的管理页面中（建议在 windows 系统下使用 Liunx IP 地址的 6052 端口号访问，虚拟机使用桥接模式），点击"),X=t("code"),zs=o("NEW DEVICE"),Gs=o(" 添加新设备，输入"),Y=t("code"),Ks=o("name"),Ms=o(" ，在选择"),J=t("code"),Rs=o("ESP8266"),js=o(" 并出现"),Q=t("code"),Bs=o("Configuration created!"),Us=o("后，先选择"),ss=t("code"),Xs=o("SKIP"),Ys=o("，然后在页面右上角的"),es=t("code"),Js=o("SECRETS"),Qs=o("处配置网络并保存。"),se=y(),m=t("li"),ee=o("完成后打开"),ls=t("code"),le=o("EDIT"),oe=o("并进行"),os=t("code"),ae=o("INSTALL"),te=o("，选择第四个，这里我选择使用 ESP8266Flasher 刷写下载的"),as=t("code"),ne=o(".bin"),pe=o("（需要安装 CH341 驱动），当然你也可以选择使用 ESPHome 提供的 web 页面进行刷写。这里需要下载编译链，请保持良好的网络环境并等待一段时间。"),re=y(),S=t("li"),ce=o("刷写成功后，ESP8266 就可以连接到 ESPHome 了，页面将会显示固件上线，再次点击"),ts=t("code"),Fe=o("EDIT"),ie=o("，在"),ns=t("code"),Ee=o("captive_portal:"),de=o("后添加以下代码："),vs=y(),ps=new al(!1),rs=y(),L=t("p"),ye=o("再次"),cs=t("code"),fe=o("INSTALL"),ve=o("时即可选择第一个选项刷写。"),_s=y(),x=t("h2"),N=t("a"),_e=o("在 HA 中添加固件"),Ds=y(),V=t("ol"),C=t("li"),De=o("在 HA 的配置面板中选择设备与服务，在添加集成中搜索 ESPHome，主机地址需要填写上文中的"),Fs=t("code"),me=o("NAME"),he=o("，在输入 key 后即可添加成功。（key 可以在刷写的"),is=t("code"),ue=o(".yaml"),Pe=o("文件中找到）"),ms=y(),T=t("h2"),Z=t("a"),He=o("其他"),hs=y(),g=t("p"),Se=o("WIFI 省电模式："),us=y(),Es=new al(!1),ds=tl(),this.h()},l(e){F=n(e,"H2",{id:!0});var c=p(F);_=n(c,"A",{href:!0});var Ie=p(_);H=a(Ie,"环境安装"),Ie.forEach(l),c.forEach(l),I=f(e),r=n(e,"OL",{});var O=p(r);d=n(O,"LI",{});var Ps=p(d);W=a(Ps,"使用"),A=n(Ps,"A",{href:!0,rel:!0,target:!0});var Ae=p(A);Ss=a(Ae,"HassWP"),Ae.forEach(l),Cs=a(Ps,"作为 homeassistant 客户端。"),Ps.forEach(l),Is=f(O),K=n(O,"LI",{});var Le=p(K);As=a(Le,"使用 ESPHome 作为连接 ESP8266 与 HA 的平台，由于 HassWP 并不是 HA 的完全体，所以这里需要安装完整的 ESPHome，这里选择将其部署在 Liunx 虚拟机上。"),Le.forEach(l),Ls=f(O),M=n(O,"LI",{});var Oe=p(M);Os=a(Oe,"在安装 ESPHome 前请确保 Liunx 的 python 处于较高版本，这里使用了 3.11.1 版本。"),Oe.forEach(l),bs=f(O),D=n(O,"LI",{});var P=p(D);ws=a(P,"使用 "),R=n(P,"CODE",{});var be=p(R);xs=a(be,"pip3 install esphome"),be.forEach(l),Ts=a(P,` 命令安装 ESPHome;
使用 `),j=n(P,"CODE",{});var we=p(j);ks=a(we,"ln -s /home/coolcall/.local/bin/esphome /usr/local/bin/esphome"),we.forEach(l),Ws=a(P," 创建"),B=n(P,"DEL",{});var xe=p(B);$s=a(xe,"软连接"),xe.forEach(l),Ns=a(P,` ；
使用 `),U=n(P,"CODE",{});var Te=p(U);Vs=a(Te,"sudo esphome dashboard config/"),Te.forEach(l),Zs=a(P," 运行。"),P.forEach(l),O.forEach(l),ys=f(e),w=n(e,"H2",{id:!0});var ke=p(w);$=n(ke,"A",{href:!0});var We=p($);gs=a(We,"ESP8266 接入 ESPHome"),We.forEach(l),ke.forEach(l),fs=f(e),u=n(e,"OL",{});var q=p(u);E=n(q,"LI",{});var v=p(E);qs=a(v,"在 ESPHome 的管理页面中（建议在 windows 系统下使用 Liunx IP 地址的 6052 端口号访问，虚拟机使用桥接模式），点击"),X=n(v,"CODE",{});var $e=p(X);zs=a($e,"NEW DEVICE"),$e.forEach(l),Gs=a(v," 添加新设备，输入"),Y=n(v,"CODE",{});var Ne=p(Y);Ks=a(Ne,"name"),Ne.forEach(l),Ms=a(v," ，在选择"),J=n(v,"CODE",{});var Ve=p(J);Rs=a(Ve,"ESP8266"),Ve.forEach(l),js=a(v," 并出现"),Q=n(v,"CODE",{});var Ze=p(Q);Bs=a(Ze,"Configuration created!"),Ze.forEach(l),Us=a(v,"后，先选择"),ss=n(v,"CODE",{});var ge=p(ss);Xs=a(ge,"SKIP"),ge.forEach(l),Ys=a(v,"，然后在页面右上角的"),es=n(v,"CODE",{});var qe=p(es);Js=a(qe,"SECRETS"),qe.forEach(l),Qs=a(v,"处配置网络并保存。"),v.forEach(l),se=f(q),m=n(q,"LI",{});var b=p(m);ee=a(b,"完成后打开"),ls=n(b,"CODE",{});var ze=p(ls);le=a(ze,"EDIT"),ze.forEach(l),oe=a(b,"并进行"),os=n(b,"CODE",{});var Ge=p(os);ae=a(Ge,"INSTALL"),Ge.forEach(l),te=a(b,"，选择第四个，这里我选择使用 ESP8266Flasher 刷写下载的"),as=n(b,"CODE",{});var Ke=p(as);ne=a(Ke,".bin"),Ke.forEach(l),pe=a(b,"（需要安装 CH341 驱动），当然你也可以选择使用 ESPHome 提供的 web 页面进行刷写。这里需要下载编译链，请保持良好的网络环境并等待一段时间。"),b.forEach(l),re=f(q),S=n(q,"LI",{});var z=p(S);ce=a(z,"刷写成功后，ESP8266 就可以连接到 ESPHome 了，页面将会显示固件上线，再次点击"),ts=n(z,"CODE",{});var Me=p(ts);Fe=a(Me,"EDIT"),Me.forEach(l),ie=a(z,"，在"),ns=n(z,"CODE",{});var Re=p(ns);Ee=a(Re,"captive_portal:"),Re.forEach(l),de=a(z,"后添加以下代码："),z.forEach(l),q.forEach(l),vs=f(e),ps=nl(e,!1),rs=f(e),L=n(e,"P",{});var Hs=p(L);ye=a(Hs,"再次"),cs=n(Hs,"CODE",{});var je=p(cs);fe=a(je,"INSTALL"),je.forEach(l),ve=a(Hs,"时即可选择第一个选项刷写。"),Hs.forEach(l),_s=f(e),x=n(e,"H2",{id:!0});var Be=p(x);N=n(Be,"A",{href:!0});var Ue=p(N);_e=a(Ue,"在 HA 中添加固件"),Ue.forEach(l),Be.forEach(l),Ds=f(e),V=n(e,"OL",{});var Xe=p(V);C=n(Xe,"LI",{});var G=p(C);De=a(G,"在 HA 的配置面板中选择设备与服务，在添加集成中搜索 ESPHome，主机地址需要填写上文中的"),Fs=n(G,"CODE",{});var Ye=p(Fs);me=a(Ye,"NAME"),Ye.forEach(l),he=a(G,"，在输入 key 后即可添加成功。（key 可以在刷写的"),is=n(G,"CODE",{});var Je=p(is);ue=a(Je,".yaml"),Je.forEach(l),Pe=a(G,"文件中找到）"),G.forEach(l),Xe.forEach(l),ms=f(e),T=n(e,"H2",{id:!0});var Qe=p(T);Z=n(Qe,"A",{href:!0});var sl=p(Z);He=a(sl,"其他"),sl.forEach(l),Qe.forEach(l),hs=f(e),g=n(e,"P",{});var el=p(g);Se=a(el,"WIFI 省电模式："),el.forEach(l),us=f(e),Es=nl(e,!1),ds=tl(),this.h()},h(){h(_,"href","#环境安装"),h(F,"id","环境安装"),h(A,"href","https://github.com/AlexxIT/HassWP"),h(A,"rel","nofollow noopener noreferrer external"),h(A,"target","_blank"),h($,"href","#esp8266-接入-esphome"),h(w,"id","esp8266-接入-esphome"),ps.a=rs,h(N,"href","#在-ha-中添加固件"),h(x,"id","在-ha-中添加固件"),h(Z,"href","#其他"),h(T,"id","其他"),Es.a=ds},m(e,c){i(e,F,c),s(F,_),s(_,H),i(e,I,c),i(e,r,c),s(r,d),s(d,W),s(d,A),s(A,Ss),s(d,Cs),s(r,Is),s(r,K),s(K,As),s(r,Ls),s(r,M),s(M,Os),s(r,bs),s(r,D),s(D,ws),s(D,R),s(R,xs),s(D,Ts),s(D,j),s(j,ks),s(D,Ws),s(D,B),s(B,$s),s(D,Ns),s(D,U),s(U,Vs),s(D,Zs),i(e,ys,c),i(e,w,c),s(w,$),s($,gs),i(e,fs,c),i(e,u,c),s(u,E),s(E,qs),s(E,X),s(X,zs),s(E,Gs),s(E,Y),s(Y,Ks),s(E,Ms),s(E,J),s(J,Rs),s(E,js),s(E,Q),s(Q,Bs),s(E,Us),s(E,ss),s(ss,Xs),s(E,Ys),s(E,es),s(es,Js),s(E,Qs),s(u,se),s(u,m),s(m,ee),s(m,ls),s(ls,le),s(m,oe),s(m,os),s(os,ae),s(m,te),s(m,as),s(as,ne),s(m,pe),s(u,re),s(u,S),s(S,ce),s(S,ts),s(ts,Fe),s(S,ie),s(S,ns),s(ns,Ee),s(S,de),i(e,vs,c),ps.m(rl,e,c),i(e,rs,c),i(e,L,c),s(L,ye),s(L,cs),s(cs,fe),s(L,ve),i(e,_s,c),i(e,x,c),s(x,N),s(N,_e),i(e,Ds,c),i(e,V,c),s(V,C),s(C,De),s(C,Fs),s(Fs,me),s(C,he),s(C,is),s(is,ue),s(C,Pe),i(e,ms,c),i(e,T,c),s(T,Z),s(Z,He),i(e,hs,c),i(e,g,c),s(g,Se),i(e,us,c),Es.m(cl,e,c),i(e,ds,c)},p:hl,d(e){e&&l(F),e&&l(I),e&&l(r),e&&l(ys),e&&l(w),e&&l(fs),e&&l(u),e&&l(vs),e&&ps.d(),e&&l(rs),e&&l(L),e&&l(_s),e&&l(x),e&&l(Ds),e&&l(V),e&&l(ms),e&&l(T),e&&l(hs),e&&l(g),e&&l(us),e&&l(ds),e&&Es.d()}}}function Hl(k){let F,_;const H=[k[0],pl];let I={$$slots:{default:[Pl]},$$scope:{ctx:k}};for(let r=0;r<H.length;r+=1)I=Ce(I,H[r]);return F=new ul({props:I}),{c(){dl(F.$$.fragment)},l(r){yl(F.$$.fragment,r)},m(r,d){fl(F,r,d),_=!0},p(r,[d]){const W=d&1?vl(H,[d&1&&ll(r[0]),d&0&&ll(pl)]):{};d&2&&(W.$$scope={dirty:d,ctx:r}),F.$set(W)},i(r){_||(_l(F.$$.fragment,r),_=!0)},o(r){Dl(F.$$.fragment,r),_=!1},d(r){ml(F,r)}}}const pl={title:"通过 Homeassistant 控制继电器",alt:"Az",created:"2023-01-13T00:00:00.000Z",updated:"2023-02-27T00:00:00.000Z",tags:["IoT"],images:[],slug:"/20230113/+page.svelte.md",path:"/20230113",toc:[{depth:2,title:"环境安装",slug:"环境安装"},{depth:2,title:"ESP8266 接入 ESPHome",slug:"esp8266-接入-esphome"},{depth:2,title:"在 HA 中添加固件",slug:"在-ha-中添加固件"},{depth:2,title:"其他",slug:"其他"}]};function Sl(k,F,_){return k.$$set=H=>{_(0,F=Ce(Ce({},F),ol(H)))},F=ol(F),[F]}class Al extends Fl{constructor(F){super(),il(this,F,Sl,Hl,El,{})}}export{Al as component};
